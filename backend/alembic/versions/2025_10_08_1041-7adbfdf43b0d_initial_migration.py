"""Initial migration

Revision ID: 7adbfdf43b0d
Revises: 
Create Date: 2025-10-08 10:41:47.566565

"""
import pgvector.sqlalchemy
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7adbfdf43b0d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('industry', sa.String(length=100), nullable=True),
    sa.Column('company_size', sa.String(length=50), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('website', sa.String(length=500), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('logo_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_company_industry'), 'company', ['industry'], unique=False)
    op.create_index(op.f('ix_company_name'), 'company', ['name'], unique=False)
    op.create_table('matching_config',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('version', sa.String(length=50), nullable=False),
    sa.Column('weights', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('thresholds', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('penalties', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_matching_config_is_active'), 'matching_config', ['is_active'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.Column('profile_image_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notification_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('job_posting',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('company_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('raw_text', sa.Text(), nullable=False),
    sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('responsibilities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('qualifications', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('benefits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('employment_type', sa.String(length=50), nullable=True),
    sa.Column('experience_level', sa.String(length=50), nullable=True),
    sa.Column('min_experience_years', sa.Integer(), nullable=True),
    sa.Column('max_experience_years', sa.Integer(), nullable=True),
    sa.Column('salary_min', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('salary_max', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('salary_currency', sa.String(length=10), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('remote_type', sa.String(length=50), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=768), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('parsed_skills', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('parsed_domains', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('external_id', sa.String(length=255), nullable=True),
    sa.Column('external_url', sa.String(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('posted_at', sa.Date(), nullable=True),
    sa.Column('expires_at', sa.Date(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.Column('application_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_job_posting_experience_level'), 'job_posting', ['experience_level'], unique=False)
    op.create_index(op.f('ix_job_posting_is_active'), 'job_posting', ['is_active'], unique=False)
    op.create_index(op.f('ix_job_posting_location'), 'job_posting', ['location'], unique=False)
    op.create_index(op.f('ix_job_posting_posted_at'), 'job_posting', ['posted_at'], unique=False)
    op.create_index(op.f('ix_job_posting_title'), 'job_posting', ['title'], unique=False)
    op.create_table('resume',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('file_name', sa.String(length=500), nullable=False),
    sa.Column('file_url', sa.String(length=500), nullable=False),
    sa.Column('file_type', sa.String(length=50), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('raw_text', sa.Text(), nullable=False),
    sa.Column('parsed_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('extracted_skills', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('extracted_experience_years', sa.Integer(), nullable=True),
    sa.Column('extracted_domains', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('extracted_education_level', sa.String(length=50), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=768), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resume_created_at'), 'resume', ['created_at'], unique=False)
    op.create_index(op.f('ix_resume_user_id'), 'resume', ['user_id'], unique=False)
    op.create_table('matching_result',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=True),
    sa.Column('resume_id', sa.UUID(), nullable=True),
    sa.Column('overall_score', sa.DECIMAL(precision=5, scale=4), nullable=False),
    sa.Column('grade', sa.String(length=50), nullable=True),
    sa.Column('category_scores', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('matching_evidence', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('penalties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('algorithm_version', sa.String(length=50), nullable=True),
    sa.Column('calculation_time_ms', sa.Integer(), nullable=True),
    sa.Column('is_viewed', sa.Boolean(), nullable=True),
    sa.Column('is_applied', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['job_posting.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resume_id'], ['resume.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_matching_result_created_at'), 'matching_result', ['created_at'], unique=False)
    op.create_index(op.f('ix_matching_result_grade'), 'matching_result', ['grade'], unique=False)
    op.create_index(op.f('ix_matching_result_job_id'), 'matching_result', ['job_id'], unique=False)
    op.create_index(op.f('ix_matching_result_overall_score'), 'matching_result', ['overall_score'], unique=False)
    op.create_index(op.f('ix_matching_result_resume_id'), 'matching_result', ['resume_id'], unique=False)
    op.create_table('llm_feedback',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('matching_result_id', sa.UUID(), nullable=True),
    sa.Column('resume_id', sa.UUID(), nullable=True),
    sa.Column('job_id', sa.UUID(), nullable=True),
    sa.Column('feedback_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('llm_model', sa.String(length=100), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('generation_time_ms', sa.Integer(), nullable=True),
    sa.Column('is_helpful', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['job_posting.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['matching_result_id'], ['matching_result.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resume_id'], ['resume.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_llm_feedback_created_at'), 'llm_feedback', ['created_at'], unique=False)
    op.create_index(op.f('ix_llm_feedback_job_id'), 'llm_feedback', ['job_id'], unique=False)
    op.create_index(op.f('ix_llm_feedback_matching_result_id'), 'llm_feedback', ['matching_result_id'], unique=False)
    op.create_index(op.f('ix_llm_feedback_resume_id'), 'llm_feedback', ['resume_id'], unique=False)
    op.create_table('user_feedback',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('matching_result_id', sa.UUID(), nullable=True),
    sa.Column('feedback_type', sa.String(length=50), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=True),
    sa.Column('admin_response', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['matching_result_id'], ['matching_result.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_feedback_feedback_type'), 'user_feedback', ['feedback_type'], unique=False)
    op.create_index(op.f('ix_user_feedback_matching_result_id'), 'user_feedback', ['matching_result_id'], unique=False)
    op.create_index(op.f('ix_user_feedback_rating'), 'user_feedback', ['rating'], unique=False)
    op.create_index(op.f('ix_user_feedback_user_id'), 'user_feedback', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_feedback_user_id'), table_name='user_feedback')
    op.drop_index(op.f('ix_user_feedback_rating'), table_name='user_feedback')
    op.drop_index(op.f('ix_user_feedback_matching_result_id'), table_name='user_feedback')
    op.drop_index(op.f('ix_user_feedback_feedback_type'), table_name='user_feedback')
    op.drop_table('user_feedback')
    op.drop_index(op.f('ix_llm_feedback_resume_id'), table_name='llm_feedback')
    op.drop_index(op.f('ix_llm_feedback_matching_result_id'), table_name='llm_feedback')
    op.drop_index(op.f('ix_llm_feedback_job_id'), table_name='llm_feedback')
    op.drop_index(op.f('ix_llm_feedback_created_at'), table_name='llm_feedback')
    op.drop_table('llm_feedback')
    op.drop_index(op.f('ix_matching_result_resume_id'), table_name='matching_result')
    op.drop_index(op.f('ix_matching_result_overall_score'), table_name='matching_result')
    op.drop_index(op.f('ix_matching_result_job_id'), table_name='matching_result')
    op.drop_index(op.f('ix_matching_result_grade'), table_name='matching_result')
    op.drop_index(op.f('ix_matching_result_created_at'), table_name='matching_result')
    op.drop_table('matching_result')
    op.drop_index(op.f('ix_resume_user_id'), table_name='resume')
    op.drop_index(op.f('ix_resume_created_at'), table_name='resume')
    op.drop_table('resume')
    op.drop_index(op.f('ix_job_posting_title'), table_name='job_posting')
    op.drop_index(op.f('ix_job_posting_posted_at'), table_name='job_posting')
    op.drop_index(op.f('ix_job_posting_location'), table_name='job_posting')
    op.drop_index(op.f('ix_job_posting_is_active'), table_name='job_posting')
    op.drop_index(op.f('ix_job_posting_experience_level'), table_name='job_posting')
    op.drop_table('job_posting')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_matching_config_is_active'), table_name='matching_config')
    op.drop_table('matching_config')
    op.drop_index(op.f('ix_company_name'), table_name='company')
    op.drop_index(op.f('ix_company_industry'), table_name='company')
    op.drop_table('company')
    # ### end Alembic commands ###

